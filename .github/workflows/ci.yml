name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semver version to tag (e.g., 1.2.3)'
        required: false
        type: string
      ref:
        description: 'Git ref to tag (branch name or full sha). Default: main'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
env:
  GO_VERSION: '1.24.x'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Lint
        run: make lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    name: Unit tests
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build
        run: make build
      - name: Test
        run: make test-race

  get-jwt:
    runs-on: ubuntu-latest
    name: Obtain JWT (login + mint-client)
    needs: lint
    env:
      URNETWORK_USERNAME: ${{ secrets.URNETWORK_USERNAME }}
      URNETWORK_PASSWORD: ${{ secrets.URNETWORK_PASSWORD }}
      URNETWORK_API_URL: ${{ secrets.URNETWORK_API_URL }}
    outputs:
      jwt: ${{ steps.export.outputs.jwt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Check secrets gate
        id: gate
        run: |
          if [ -z "${URNETWORK_USERNAME:-}" ] || [ -z "${URNETWORK_PASSWORD:-}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "No URNETWORK_USERNAME/URNETWORK_PASSWORD; skipping get-jwt"
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Mask credentials
        if: steps.gate.outputs.enabled == 'true'
        run: |
          [ -n "${URNETWORK_USERNAME:-}" ] && echo "::add-mask::${URNETWORK_USERNAME}" || true
          [ -n "${URNETWORK_PASSWORD:-}" ] && echo "::add-mask::${URNETWORK_PASSWORD}" || true
      - name: Build CLI
        if: steps.gate.outputs.enabled == 'true'
        run: make build
      - name: Login (save BY JWT)
        if: steps.gate.outputs.enabled == 'true'
        run: |
          set -euo pipefail
          args=()
          if [ -n "${URNETWORK_API_URL:-}" ]; then args+=(--api_url="$URNETWORK_API_URL"); fi
          ./dist/urnet-client login --user_auth="$URNETWORK_USERNAME" --password="$URNETWORK_PASSWORD" "${args[@]}"
      - name: Mint client JWT (optional)
        if: steps.gate.outputs.enabled == 'true'
        run: |
          set -euo pipefail
          args=()
          if [ -n "${URNETWORK_API_URL:-}" ]; then args+=(--api_url="$URNETWORK_API_URL"); fi
          # Try to mint a client-scoped JWT; if the BY JWT is sufficient, continue even if mint fails.
          ./dist/urnet-client mint-client "${args[@]}" || echo "mint-client failed or not required; proceeding"
      - name: Export JWT
        id: export
        if: steps.gate.outputs.enabled == 'true'
        run: |
          set -euo pipefail
          JWT_PATH="$HOME/.urnetwork/jwt"
          if [ ! -f "$JWT_PATH" ]; then
            echo "JWT not found at $JWT_PATH" >&2
            exit 1
          fi
          jwt=$(tr -d '\n' < "$JWT_PATH" | tr -d '\r')
          echo "::add-mask::$jwt"
          echo "jwt=$jwt" >> "$GITHUB_OUTPUT"

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint, get-jwt]
    name: Integration tests (opt-in)
    env:
      URNETWORK_TEST_INTEGRATION: '1'
      URNETWORK_JWT: ${{ needs.get-jwt.outputs.jwt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Decide to run or skip
        id: dec
        run: |
          if [ -z "${{ needs.get-jwt.outputs.jwt }}" ]; then
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "No JWT from get-jwt; skipping integration tests"
          else
            echo "run=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Run integration tests only
        if: steps.dec.outputs.run == 'true'
        run: make test-integration

  docker-build-test:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request'
    name: Docker build test (PR)
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image (no push)
        run: make ci-docker-build

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    env:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/urnetwork-client
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            # Add semantic version tags when pushing a tag like v1.2.3
            # Produces: 1.2.3, 1.2, 1
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - name: Log in to GHCR (PAT)
        if: (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/')) && env.GHCR_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}
      - name: Log in to GHCR (GITHUB_TOKEN)
        if: (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/')) && env.GHCR_TOKEN == ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache,mode=max

  publish-images-on-release:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    env:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR (PAT)
        if: env.GHCR_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}
      - name: Log in to GHCR (GITHUB_TOKEN)
        if: env.GHCR_TOKEN == ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (release tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/urnetwork-client:${{ needs.release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/urnetwork-client:${{ needs.release.outputs.tag }}
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache,mode=max

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write  # needed to create tags and releases
    outputs:
      released: ${{ steps.semrel.outputs.new_release_published }}
      version: ${{ steps.semrel.outputs.new_release_version }}
      tag: ${{ steps.semrel.outputs.new_release_git_tag }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build cross-platform binaries
        run: |
          set -euo pipefail
          make build-linux-amd64
          make build-linux-arm64
          make build-darwin-amd64
          make build-darwin-arm64
      - name: Prepare release assets
        run: |
          set -euo pipefail
          cp dist/linux_amd64/urnet-client  dist/urnet-client_linux_amd64
          cp dist/linux_arm64/urnet-client  dist/urnet-client_linux_arm64
          cp dist/darwin_amd64/urnet-client dist/urnet-client_darwin_amd64
          cp dist/darwin_arm64/urnet-client dist/urnet-client_darwin_arm64
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Semantic Release
        id: semrel
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  force-tag-and-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.version != ''
    permissions:
      contents: write
      packages: write
    env:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Resolve target ref
        id: ref
        run: |
          target_ref="${{ inputs.ref }}"
          if [ -z "$target_ref" ]; then target_ref="main"; fi
          git fetch origin "$target_ref" --depth=1 || true
          if git show-ref --verify --quiet "refs/heads/$target_ref"; then
            sha=$(git rev-parse "refs/remotes/origin/$target_ref")
          else
            # try resolve as sha or tag
            sha=$(git rev-parse "$target_ref^{commit}")
          fi
          echo "sha=$sha" >> $GITHUB_OUTPUT
      - name: Create git tag v${{ inputs.version }}
        uses: actions/github-script@v7
        with:
          script: |
            const version = core.getInput('version');
            const sha = core.getInput('sha');
            const tag = `v${version}`;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha
              });
              core.notice(`Created tag ${tag} at ${sha}`);
            } catch (e) {
              if (e.status === 422) {
                core.warning(`Tag ${tag} already exists; continuing`);
              } else {
                throw e;
              }
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
        env:
          version: ${{ inputs.version }}
          sha: ${{ steps.ref.outputs.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR (PAT)
        if: env.GHCR_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}
      - name: Log in to GHCR (GITHUB_TOKEN)
        if: env.GHCR_TOKEN == ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (forced tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/urnetwork-client:${{ inputs.version }}
            ghcr.io/${{ github.repository_owner }}/urnetwork-client:v${{ inputs.version }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/urnetwork-client:buildcache,mode=max
