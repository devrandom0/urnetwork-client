version: 2.1

executors:
  go-exec:
    docker:
      - image: cimg/go:1.24
    working_directory: ~/project

commands:
  restore-go-cache:
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
            - go-mod-v1-{{ .Branch }}
            - go-mod-v1
  save-go-cache:
    steps:
      - save_cache:
          key: go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
            - ~/.cache/go-build

jobs:
  lint:
    executor: go-exec
    steps:
      - checkout
      - run: go version
      - restore-go-cache
      - run:
          name: gofmt (enforce formatting)
          command: |
            fmt_out=$(gofmt -s -l . | grep -v '^vendor/' || true)
            if [ -n "$fmt_out" ]; then
              echo "gofmt found unformatted files:" >&2
              echo "$fmt_out" >&2
              echo "Run: gofmt -s -w <files>" >&2
              exit 1
            fi
      - run:
          name: go vet
          command: go vet ./...
      - save-go-cache
  test:
    executor: go-exec
    steps:
      - checkout
      - run: go version
      - run: go env
      - restore-go-cache
      - run: go mod download
      - run:
          name: Run tests
          command: go test -v ./...
      - save-go-cache

  build-linux:
    executor: go-exec
    parameters:
      arch:
        type: enum
        enum: ["amd64", "arm64"]
    steps:
      - checkout
      - restore-go-cache
      - run:
          name: Build linux/<< parameters.arch >>
          command: |
            mkdir -p dist/linux_<< parameters.arch >>
            CGO_ENABLED=0 GOOS=linux GOARCH=<< parameters.arch >> \
              go build -trimpath -ldflags "-s -w" -o dist/linux_<< parameters.arch >>/urnet-client ./
      - store_artifacts:
          path: dist/linux_<< parameters.arch >>
          destination: dist/linux_<< parameters.arch >>

  docker-build-push:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: false
      - run:
          name: Docker login to GHCR
          command: |
            if [ -z "${GHCR_USERNAME}" ] || [ -z "${GHCR_TOKEN}" ]; then
              echo "GHCR_USERNAME or GHCR_TOKEN not set. Ensure CircleCI context 'Github-Docker-Auth' provides them." >&2
              exit 1
            fi
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          name: Enable binfmt and setup buildx
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install all
            docker buildx create --use --name urnetx || docker buildx use urnetx
            docker buildx inspect --bootstrap
      - run:
          name: Build and push multi-arch image (amd64+arm64) with cache
          command: |
            IMAGE_REPO="ghcr.io/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            IMAGE_REPO=$(echo "$IMAGE_REPO" | tr '[:upper:]' '[:lower:]')
            GIT_SHA=$(echo "$CIRCLE_SHA1" | cut -c1-7)
            if [ -n "${CIRCLE_TAG}" ]; then
              PRIMARY_TAG="${CIRCLE_TAG}"
            elif [ "${CIRCLE_BRANCH}" = "main" ]; then
              PRIMARY_TAG="latest"
            else
              PRIMARY_TAG="${CIRCLE_BRANCH}"
            fi
            # Use registry cache to speed up builds on free tier
            CACHE_TAG="buildcache"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              -f Dockerfile \
              -t "${IMAGE_REPO}:${PRIMARY_TAG}" \
              -t "${IMAGE_REPO}:${GIT_SHA}" \
              --cache-from=type=registry,ref="${IMAGE_REPO}:${CACHE_TAG}" \
              --cache-to=type=registry,ref="${IMAGE_REPO}:${CACHE_TAG}",mode=max \
              --push \
              .
            echo "Pushed ${IMAGE_REPO}:${PRIMARY_TAG} and ${IMAGE_REPO}:${GIT_SHA}"

workflows:
  build_and_test:
    jobs:
      - lint
      - test:
          requires:
            - lint
      - build-linux:
          name: build-<< matrix.arch >>
          requires:
            - test
          matrix:
            parameters:
              arch: ["amd64", "arm64"]
      - docker-build-push:
          context:
            - Github-Docker-Auth
          requires:
            - test
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
